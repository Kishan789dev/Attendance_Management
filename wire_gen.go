// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gorilla/mux"
	"github.com/kk/attendance_management/authentication/getrole"
	"github.com/kk/attendance_management/authentication/login"
	"github.com/kk/attendance_management/authentication/tokenvalidation"
	"github.com/kk/attendance_management/components/students"
	"github.com/kk/attendance_management/components/teachers"
	"github.com/kk/attendance_management/components/users"
	"github.com/kk/attendance_management/dataBase"
	"github.com/kk/attendance_management/routers"
)

// Injectors from wire.go:

func InitialiseApp() *App {
	router := mux.NewRouter()
	dataBaseImpl := dataBase.NewDataBase()
	loginRepoImpl := login.NewLoginRepo(dataBaseImpl)
	loginSvcImpl := login.NewLoginSvc(loginRepoImpl)
	getroleRepoImpl := getrole.NewGetRole(dataBaseImpl)
	getroleSvcImpl := getrole.NewGetroleSvc(getroleRepoImpl)
	authenticationRepoImpl := tokenvalid.NewAuthenticationRepo(dataBaseImpl)
	authenticationSvcImpl := tokenvalid.NewAuthenticationSvc(authenticationRepoImpl)
	authenticationRestImpl := tokenvalid.NewAuthenticationRest(authenticationSvcImpl)
	getroleRestImpl := getrole.NewGetroleRest(getroleSvcImpl, authenticationRestImpl)
	loginRestImpl := login.NewLoginRest(loginSvcImpl, getroleRestImpl)
	studentRepositoryImpl := students.NewStudentRepository(dataBaseImpl)
	userRepoImpl := users.NewUserRepo(dataBaseImpl)
	userSvcImpl := users.NewUserSvc(userRepoImpl)
	userRestImpl := users.NewUserRestImpl(userSvcImpl)
	studentServiceImpl := students.NewStudentservice(studentRepositoryImpl, userRestImpl)
	studentRestImpl := students.NewStudentRest(studentServiceImpl, getroleRestImpl, userRestImpl, authenticationRestImpl)
	teacherRepositoryImpl := teachers.NewTeacherRepositoryImpl(dataBaseImpl)
	teacherSvcImpl := teachers.NewTeacherSvc(teacherRepositoryImpl, userRestImpl)
	teacherRestImpl := teachers.NewteacherRest(teacherSvcImpl, getroleRestImpl, userRestImpl, authenticationRestImpl)
	routeImp := routers.NewRoute(router, loginRestImpl, studentRestImpl, teacherRestImpl)
	app := NewApp(routeImp, dataBaseImpl)
	return app
}
